# =============================================================================
# Script de Pruebas de Integraci√≥n - E-commerce Microservices
# =============================================================================
# Este script ejecuta todas las pruebas de integraci√≥n del sistema
# Uso: .\run-integration-tests.ps1 [-Verbose] [-Coverage] [-Service <nombre>]

param(
    [switch]$Verbose,
    [switch]$Coverage,
    [string]$Service = ""
)

Write-Host ""
Write-Host "üß™ Iniciando Pruebas de Integraci√≥n - E-commerce Microservices" -ForegroundColor Cyan
Write-Host "=" -ForegroundColor Cyan -NoNewline
Write-Host ("=" * 69) -ForegroundColor Cyan
Write-Host ""

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "Backend")) {
    Write-Host "‚ùå Error: Este script debe ejecutarse desde la ra√≠z del proyecto" -ForegroundColor Red
    Write-Host "   Directorio actual: $(Get-Location)" -ForegroundColor Yellow
    Write-Host "   Esperado: Directorio que contenga la carpeta 'Backend'" -ForegroundColor Yellow
    exit 1
}

# Verificar que Python est√° instalado
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python detectado: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Python no est√° instalado o no est√° en el PATH" -ForegroundColor Red
    exit 1
}

# Verificar que pip est√° disponible
try {
    $pipVersion = pip --version 2>&1
    Write-Host "‚úÖ pip detectado: $pipVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: pip no est√° disponible" -ForegroundColor Red
    exit 1
}

# Cambiar al directorio Backend
Set-Location "Backend"

Write-Host ""
Write-Host "üì¶ Instalando dependencias..." -ForegroundColor Yellow

# Instalar dependencias
try {
    if ($Verbose) {
        pip install -e .[dev]
    } else {
        pip install -e .[dev] | Out-Null
    }
    Write-Host "‚úÖ Dependencias instaladas correctamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error al instalar dependencias" -ForegroundColor Red
    exit 1
}

# Verificar que pytest est√° instalado
try {
    $pytestVersion = python -m pytest --version 2>&1
    Write-Host "‚úÖ pytest detectado: $pytestVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: pytest no est√° instalado correctamente" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üß™ Ejecutando pruebas de integraci√≥n..." -ForegroundColor Yellow

# Construir comando pytest
$pytestCmd = "python -m pytest tests/integration/"

if ($Service) {
    $pytestCmd += "test_$Service`_service.py"
    Write-Host "üéØ Ejecutando pruebas solo para: $Service" -ForegroundColor Cyan
}

if ($Verbose) {
    $pytestCmd += " -v"
}

if ($Coverage) {
    $pytestCmd += " --cov=src --cov-report=html --cov-report=term-missing"
    Write-Host "üìä Generando reporte de cobertura..." -ForegroundColor Cyan
}

# Ejecutar las pruebas
Write-Host ""
Write-Host "Comando: $pytestCmd" -ForegroundColor Gray
Write-Host ""

try {
    Invoke-Expression $pytestCmd
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "‚úÖ Todas las pruebas pasaron exitosamente" -ForegroundColor Green
    } else {
        Write-Host ""
        Write-Host "‚ùå Algunas pruebas fallaron" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host ""
    Write-Host "‚ùå Error al ejecutar las pruebas: $_" -ForegroundColor Red
    exit 1
}

# Mostrar resumen
Write-Host ""
Write-Host "=" -ForegroundColor Cyan -NoNewline
Write-Host ("=" * 69) -ForegroundColor Cyan
Write-Host "üìã RESUMEN DE PRUEBAS DE INTEGRACI√ìN" -ForegroundColor Cyan
Write-Host "=" -ForegroundColor Cyan -NoNewline
Write-Host ("=" * 69) -ForegroundColor Cyan
Write-Host ""

$services = @(
    "Product Service",
    "User Service", 
    "Cart Service",
    "Order Service",
    "Payment Service",
    "Delivery Service"
)

Write-Host "‚úÖ Servicios probados:" -ForegroundColor Green
foreach ($service in $services) {
    if (-not $Service -or $Service -eq $service.Replace(" Service", "").ToLower()) {
        Write-Host "   ‚Ä¢ $service" -ForegroundColor White
    }
}

Write-Host ""
Write-Host "üîç Tipos de pruebas ejecutadas:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Creaci√≥n de entidades en base de datos" -ForegroundColor White
Write-Host "   ‚Ä¢ Recuperaci√≥n de entidades por ID" -ForegroundColor White
Write-Host "   ‚Ä¢ Listado de entidades" -ForegroundColor White
Write-Host "   ‚Ä¢ Actualizaci√≥n de entidades" -ForegroundColor White
Write-Host "   ‚Ä¢ Eliminaci√≥n de entidades" -ForegroundColor White
Write-Host "   ‚Ä¢ Validaci√≥n de enums y estados" -ForegroundColor White
Write-Host "   ‚Ä¢ Pruebas de restricciones de base de datos" -ForegroundColor White
Write-Host "   ‚Ä¢ Pruebas de precisi√≥n de datos" -ForegroundColor White
Write-Host "   ‚Ä¢ Pruebas de relaciones entre entidades" -ForegroundColor White

if ($Coverage) {
    Write-Host ""
    Write-Host "üìä Reporte de cobertura generado en: Backend\htmlcov\index.html" -ForegroundColor Cyan
}

Write-Host ""
Write-Host "üéâ ¬°Todas las pruebas de integraci√≥n completadas exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "üí° Pr√≥ximos pasos:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Revisar el reporte de cobertura (si se gener√≥)" -ForegroundColor White
Write-Host "   ‚Ä¢ Ejecutar las pruebas en el pipeline de CI/CD" -ForegroundColor White
Write-Host "   ‚Ä¢ Considerar agregar pruebas de carga" -ForegroundColor White
Write-Host "   ‚Ä¢ Implementar pruebas de integraci√≥n end-to-end" -ForegroundColor White

# Volver al directorio original
Set-Location ".."

Write-Host ""
Write-Host "‚ú® Script completado" -ForegroundColor Green
