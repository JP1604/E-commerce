# API Gateway Service
# Servicio principal que actúa como punto de entrada único (Puerto 8080)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: api-gateway:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
          name: http
        env:
        # URLs de los microservicios (desde ConfigMap)
        - name: PRODUCT_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: PRODUCT_SERVICE_URL
        - name: USER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: USER_SERVICE_URL
        - name: DELIVERY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DELIVERY_SERVICE_URL
        - name: CART_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: CART_SERVICE_URL
        - name: ORDER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: ORDER_SERVICE_URL
        - name: ORDER_VALIDATION_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: ORDER_VALIDATION_SERVICE_URL
        - name: PAYMENT_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: PAYMENT_SERVICE_URL
        
        # Configuración general
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DEBUG
        
        # Health checks - K8s verifica si el servicio está sano
        livenessProbe:  # Si falla, reinicia el contenedor
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:  # Si falla, no envía tráfico
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Service - Expone el API Gateway
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
spec:
  type: NodePort  # Accesible desde fuera del cluster
  ports:
  - port: 8080      # Puerto interno del cluster
    targetPort: 8080 # Puerto del contenedor
    nodePort: 30080  # Puerto externo (30000-32767)
    protocol: TCP
    name: http
  selector:
    app: api-gateway
